name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPOSITORY: "fashion-recommender-repo"
  SERVICE_NAME: "trendblend-service"
  REGION: "asia-south2"
  BUCKET_NAME: "fashion-recommender-models"
  # Define the service account email to be used for both deployment and runtime
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }} 

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Enable necessary Google Cloud services
        run: |-
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable artifactregistry.googleapis.com
          gcloud services enable run.googleapis.com

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker Image
        run: |-
          docker build -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" .

      - name: Push Docker Image to Artifact Registry
        run: |-
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=1 \
            --memory=2Gi \
            --cpu=2 \
            --set-env-vars="BUCKET_NAME=${{ env.BUCKET_NAME }}" \
            --service-account=${{ env.SERVICE_ACCOUNT_EMAIL }} 
            
      # This step lists all image versions in the package that have no tags,
      # then passes them to the delete command.
      - name: Clean up old container images
        if: success()
        run: |-
          echo "Cleaning up old, untagged images..."
          gcloud artifacts versions list \
            --repository="${{ env.REPOSITORY }}" \
            --package="${{ env.SERVICE_NAME }}" \
            --location="${{ env.REGION }}" \
            --filter="-tags:*" \
            --format="get(version)" \
          | xargs -r -I {} gcloud artifacts versions delete {} \
            --repository="${{ env.REPOSITORY }}" \
            --package="${{ env.SERVICE_NAME }}" \
            --location="${{ env.REGION }}" \
            --quiet
